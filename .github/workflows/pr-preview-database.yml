name: PR Preview Database

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'supabase/migrations/**'
      - 'supabase/seed.sql'

jobs:
  preview-database:
    name: Create/Update Preview Database
    runs-on: ubuntu-latest

    permissions:
      pull-requests: write
      contents: read

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Generate schema name
        id: schema
        run: |
          # Use PR number for schema name (e.g., pr_123)
          SCHEMA_NAME="pr_${{ github.event.pull_request.number }}"
          echo "name=${SCHEMA_NAME}" >> $GITHUB_OUTPUT
          echo "üì¶ Schema name: ${SCHEMA_NAME}"

      - name: Create schema and apply migrations
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_DEV_ACCESS_TOKEN }}
          PROJECT_REF: vuoucahoqaxpudtbdzjf
        run: |
          SCHEMA_NAME="${{ steps.schema.outputs.name }}"
          echo "üîß Creating preview database for schema: ${SCHEMA_NAME}"

          # Function to execute SQL via Supabase Management API
          execute_sql() {
            local sql="$1"
            curl -X POST "https://api.supabase.com/v1/projects/${PROJECT_REF}/database/query" \
              -H "Authorization: Bearer ${SUPABASE_ACCESS_TOKEN}" \
              -H "Content-Type: application/json" \
              -d "{\"query\": $(echo "$sql" | jq -Rs .)}"
          }

          # Create schema
          echo "üìù Creating schema..."
          execute_sql "DROP SCHEMA IF EXISTS ${SCHEMA_NAME} CASCADE; CREATE SCHEMA ${SCHEMA_NAME}; GRANT USAGE ON SCHEMA ${SCHEMA_NAME} TO anon, authenticated, service_role; GRANT ALL ON SCHEMA ${SCHEMA_NAME} TO postgres;"

          # Apply each migration with schema context
          echo "üîÑ Applying migrations..."
          for migration in supabase/migrations/*.sql; do
            if [ -f "$migration" ]; then
              echo "Applying: $(basename $migration)"
              # Read migration and prepend SET search_path
              sql_content="SET search_path TO ${SCHEMA_NAME}, public; $(cat $migration)"
              execute_sql "$sql_content"
            fi
          done

          echo "‚úÖ Migrations applied successfully"

      - name: Seed preview database
        if: hashFiles('supabase/seed.sql') != ''
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_DEV_ACCESS_TOKEN }}
          PROJECT_REF: vuoucahoqaxpudtbdzjf
        run: |
          SCHEMA_NAME="${{ steps.schema.outputs.name }}"

          echo "üå± Seeding preview database..."

          # Execute seed with schema context
          execute_sql() {
            local sql="$1"
            curl -X POST "https://api.supabase.com/v1/projects/${PROJECT_REF}/database/query" \
              -H "Authorization: Bearer ${SUPABASE_ACCESS_TOKEN}" \
              -H "Content-Type: application/json" \
              -d "{\"query\": $(echo "$sql" | jq -Rs .)}"
          }

          seed_sql="SET search_path TO ${SCHEMA_NAME}, public; $(cat supabase/seed.sql)"
          execute_sql "$seed_sql"

          echo "‚úÖ Seed data applied"

      - name: Generate preview credentials
        id: creds
        env:
          SUPABASE_DEV_URL: ${{ secrets.SUPABASE_DEV_URL }}
          SUPABASE_DEV_ANON_KEY: ${{ secrets.SUPABASE_DEV_ANON_KEY }}
        run: |
          SCHEMA_NAME="${{ steps.schema.outputs.name }}"

          # Store credentials for comment
          echo "url=${SUPABASE_DEV_URL}" >> $GITHUB_OUTPUT
          echo "anon_key=${SUPABASE_DEV_ANON_KEY}" >> $GITHUB_OUTPUT
          echo "schema=${SCHEMA_NAME}" >> $GITHUB_OUTPUT

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const schema = '${{ steps.schema.outputs.name }}';
            const url = '${{ steps.creds.outputs.url }}';
            const anonKey = '${{ steps.creds.outputs.anon_key }}';

            const body = `## üéØ Preview Database Ready

            Your PR preview database has been created with an isolated schema!

            ### üìä Database Details
            - **Schema:** \`${schema}\`
            - **Supabase URL:** \`${url}\`
            - **Anon Key:** \`${anonKey.substring(0, 20)}...\` (full key in secrets)

            ### üöÄ Test Your Changes

            **Option 1: Connect from local dev**
            \`\`\`bash
            # Add to your .env.local for testing
            EXPO_PUBLIC_SUPABASE_URL="${url}"
            EXPO_PUBLIC_SUPABASE_ANON_KEY="${anonKey}"
            EXPO_PUBLIC_SUPABASE_SCHEMA="${schema}"
            \`\`\`

            **Option 2: Direct SQL access**
            \`\`\`bash
            psql "postgresql://postgres:[PASSWORD]@${url.replace('https://', '').replace('.supabase.co', '')}.supabase.co:5432/postgres?options=-c%20search_path%3D${schema}"
            \`\`\`

            ### üìù Applied Migrations
            ${context.payload.pull_request.changed_files
              ? 'Check the "Files changed" tab for migration details.'
              : 'No new migrations in this PR.'}

            ### üîÑ Auto-Update
            This preview database will automatically update when you push new commits.

            ### üßπ Cleanup
            The schema will be automatically deleted when this PR is closed or merged.

            ---
            üí° **Tip:** This is a shared dev instance with schema isolation. Data is not copied from production.
            `;

            // Find existing comment and update or create new
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('üéØ Preview Database Ready')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

      - name: Validate migrations
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_DEV_ACCESS_TOKEN }}
          PROJECT_REF: vuoucahoqaxpudtbdzjf
        run: |
          SCHEMA_NAME="${{ steps.schema.outputs.name }}"

          echo "üîç Validating schema structure..."

          validation_sql="SELECT schemaname, tablename FROM pg_tables WHERE schemaname = '${SCHEMA_NAME}' ORDER BY tablename;"

          curl -X POST "https://api.supabase.com/v1/projects/${PROJECT_REF}/database/query" \
            -H "Authorization: Bearer ${SUPABASE_ACCESS_TOKEN}" \
            -H "Content-Type: application/json" \
            -d "{\"query\": $(echo "$validation_sql" | jq -Rs .)}"

          echo "‚úÖ Validation complete"
